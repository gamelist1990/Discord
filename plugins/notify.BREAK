#!/usr/bin/env python3
# 簡略化されたDiscordボット YouTube通知システム
import discord
from discord.ext import commands
import aiohttp
import asyncio
import re
from datetime import datetime
from typing import Optional
from DataBase import get_guild_value, update_guild_data

class NotificationSystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.checking = False
        self.loop_task = None
    
    @commands.Cog.listener()
    async def on_ready(self):
        """ボット起動時にチェックループを開始"""
        if not self.checking:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] 通知システム開始")
            self.start_check_loop()
    
    def start_check_loop(self):
        """シンプルなチェックループを開始"""
        if self.loop_task is None or self.loop_task.done():
            self.loop_task = self.bot.loop.create_task(self.simple_check_loop())
    
    async def simple_check_loop(self):
        """1分間隔でライブ配信をチェックする軽量ループ"""
        self.checking = True
        while True:
            try:
                await self.check_all_channels()
                await asyncio.sleep(60)  # 1分待機
            except Exception as e:
                print(f"[{datetime.now().strftime('%H:%M:%S')}] ループエラー: {e}")
                await asyncio.sleep(60)
    
    async def check_all_channels(self):
        """全ギルドのチャンネルをチェック"""
        for guild in self.bot.guilds:
            channels = get_guild_value(guild.id, 'youtube_channels', [])
            for channel_info in channels:
                await self.check_one_channel(guild, channel_info)
    
    async def check_one_channel(self, guild, channel_info):
        """単一チャンネルのライブ状態をチェック"""
        try:
            channel_id = self.extract_channel_id(channel_info.get('url', ''))
            if not channel_id:
                return
            
            is_live = await self.simple_live_check(channel_id)
            
            # 状態変化をチェック
            was_live = channel_info.get('was_live', False)
            if is_live and not was_live:
                await self.send_live_notification(guild, channel_info)
                channel_info['was_live'] = True
                self.update_channel_state(guild.id, channel_info)
            elif not is_live and was_live:
                channel_info['was_live'] = False
                self.update_channel_state(guild.id, channel_info)
                
        except Exception as e:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] チャンネルチェックエラー: {e}")
    
    def extract_channel_id(self, url):
        """URLからチャンネルIDを抽出（簡略版）"""
        patterns = [
            r'channel/([a-zA-Z0-9_-]+)',
            r'c/([a-zA-Z0-9_-]+)',
            r'user/([a-zA-Z0-9_-]+)',
            r'@([a-zA-Z0-9_-]+)'
        ]
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        return None
    
    async def simple_live_check(self, channel_id):
        """軽量なライブ配信チェック"""
        try:
            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                url = f"https://www.youtube.com/feeds/videos.xml?channel_id={channel_id}"
                async with session.get(url) as response:
                    if response.status != 200:
                        return False
                    
                    content = await response.text()
                    # 簡単なライブ検出：isLive":trueを探す
                    return '"isLive":true' in content
        except:
            return False
    
    async def send_live_notification(self, guild, channel_info):
        """ライブ通知を送信"""
        try:
            notify_channel_id = get_guild_value(guild.id, 'notify_channel')
            if not notify_channel_id:
                return
            
            channel = guild.get_channel(notify_channel_id)
            if not channel:
                return
            
            embed = discord.Embed(
                title="🔴 ライブ配信開始！",
                description=f"**{channel_info.get('name', 'チャンネル')}** がライブ配信を開始しました！",
                color=0xff0000,
                timestamp=datetime.now()
            )
            embed.add_field(name="チャンネル", value=channel_info.get('url', ''), inline=False)
            
            await channel.send(embed=embed)
            print(f"[{datetime.now().strftime('%H:%M:%S')}] 通知送信: {channel_info.get('name', 'Unknown')}")
            
        except Exception as e:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] 通知送信エラー: {e}")
    
    def update_channel_state(self, guild_id, channel_info):
        """チャンネルの状態を更新"""
        channels = get_guild_value(guild_id, 'youtube_channels', [])
        for i, ch in enumerate(channels):
            if ch.get('url') == channel_info.get('url'):
                channels[i] = channel_info
                break
        update_guild_data(guild_id, 'youtube_channels', channels)
    
    # === コマンド ===
    
    @commands.command(name="notify_channel")
    @commands.has_permissions(administrator=True)
    async def set_notify_channel(self, ctx, channel: Optional[discord.TextChannel] = None):
        """通知チャンネルを設定"""
        target_channel = channel if channel else ctx.channel
        
        update_guild_data(ctx.guild.id, 'notify_channel', target_channel.id)
        await ctx.send(f"✅ 通知チャンネルを {target_channel.mention} に設定しました")
    
    @commands.command(name="add_youtube")
    @commands.has_permissions(administrator=True)
    async def add_youtube_channel(self, ctx, url, *, name=None):
        """YouTubeチャンネルを追加"""
        channel_id = self.extract_channel_id(url)
        if not channel_id:
            await ctx.send("❌ 有効なYouTubeチャンネルURLを入力してください")
            return
        
        channels = get_guild_value(ctx.guild.id, 'youtube_channels', [])
        
        # 重複チェック
        for ch in channels:
            if ch.get('url') == url:
                await ctx.send("❌ このチャンネルは既に追加されています")
                return
        
        channel_info = {
            'url': url,
            'name': name or f"チャンネル_{len(channels)+1}",
            'was_live': False
        }
        
        channels.append(channel_info)
        update_guild_data(ctx.guild.id, 'youtube_channels', channels)
        
        await ctx.send(f"✅ YouTubeチャンネル **{channel_info['name']}** を追加しました")
    
    @commands.command(name="remove_youtube")
    @commands.has_permissions(administrator=True)
    async def remove_youtube_channel(self, ctx, *, name_or_url):
        """YouTubeチャンネルを削除"""
        channels = get_guild_value(ctx.guild.id, 'youtube_channels', [])
        
        for i, ch in enumerate(channels):
            if ch.get('name') == name_or_url or ch.get('url') == name_or_url:
                removed_channel = channels.pop(i)
                update_guild_data(ctx.guild.id, 'youtube_channels', channels)
                await ctx.send(f"✅ YouTubeチャンネル **{removed_channel['name']}** を削除しました")
                return
        
        await ctx.send("❌ 指定されたチャンネルが見つかりません")
    
    @commands.command(name="list_youtube")
    async def list_youtube_channels(self, ctx):
        """登録されているYouTubeチャンネル一覧"""
        channels = get_guild_value(ctx.guild.id, 'youtube_channels', [])
        
        if not channels:
            await ctx.send("📝 登録されているYouTubeチャンネルはありません")
            return
        
        embed = discord.Embed(title="📺 登録チャンネル一覧", color=0x00ff00)
        
        for ch in channels:
            status = "🔴 ライブ中" if ch.get('was_live', False) else "⚫ オフライン"
            embed.add_field(
                name=f"{ch.get('name', 'Unknown')} {status}",
                value=ch.get('url', ''),
                inline=False
            )
        
        await ctx.send(embed=embed)
    
    @commands.command(name="check_now")
    @commands.has_permissions(administrator=True)
    async def manual_check(self, ctx):
        """手動でライブ配信をチェック"""
        await ctx.send("🔍 チェック中...")
        await self.check_all_channels()
        await ctx.send("✅ チェック完了")

async def setup(bot):
    await bot.add_cog(NotificationSystem(bot))
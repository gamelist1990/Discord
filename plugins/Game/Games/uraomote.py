# ÂøÖË¶Å„Å™import

import discord
import asyncio
import random
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont


# --- „Ç≥„Ç§„É≥„Éà„ÇπÔºàË°®Ë£èÂΩì„Å¶Ôºâ„Ç≤„Éº„É† ---
from plugins.Game.game import game_manager

def register_game(game_manager):
    game_manager.register_game(
        'cointoss',
        '„Ç≥„Ç§„É≥„Éà„Çπ3„É©„Ç¶„É≥„ÉâÔºàË°®Ë£èÂΩì„Å¶Ôºâ',
        matching=True,
        start_func=start_cointoss,
        min_players=1,
        max_players=2
    )



async def start_cointoss(ctx, players):
    """
    3„É©„Ç¶„É≥„Éâ„ÅÆ„Ç≥„Ç§„É≥„Éà„ÇπË°®Ë£èÂΩì„Å¶„Ç≤„Éº„É†„ÄÇÂêÑ„Éó„É¨„Ç§„É§„Éº„ÅåÊØéÂõûË°®Ë£è„ÇíÈÅ∏„Å≥„ÄÅÈÅ∏Êäû„Åî„Å®„Å´GIF„ÅßÁµêÊûú„ÇíË°®Á§∫„ÄÇ
    Âãù„Å°„Åß10„Ç≥„Ç§„É≥„ÄÅË≤†„Åë„Åß5„Ç≥„Ç§„É≥„ÄÇ
    """
    n = len(players)
    total_results = []
    win_count = {uid: 0 for uid, _ in players}
    lose_count = {uid: 0 for uid, _ in players}
    msg = None
    for round_num in range(1, 4):
        round_results = []
        for idx, (uid, uname) in enumerate(players):
            # Áï™„ÅÆÊ°àÂÜÖ
            embed = discord.Embed(title=f"ü™ô „Ç≥„Ç§„É≥„Éà„Çπ Round {round_num}", description=f"{uname}„Åï„Çì„ÅÆÁï™„Åß„Åô„ÄÇË°®„ÅãË£è„Åã„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑÔºÅ", color=0x5865f2)
            view = CoinTossView([(uid, uname)])
            if msg is None:
                msg = await ctx.send(embed=embed, view=view)
            else:
                await msg.edit(embed=embed, view=view)
            try:
                await asyncio.wait_for(view.done.wait(), timeout=30)
            except asyncio.TimeoutError:
                timeout_embed = discord.Embed(title=f"ü™ô „Ç≥„Ç§„É≥„Éà„Çπ Round {round_num}", description=f"‚è∞ „Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÄÇËá™Âãï„Åß„É©„É≥„ÉÄ„É†ÈÅ∏Êäû„Åï„Çå„Åæ„Åô„ÄÇ", color=0x5865f2)
                await msg.edit(embed=timeout_embed, view=view)
                view.auto_select()
            # ÁµêÊûúÂà§ÂÆö
            choice = view.choices.get(str(uid), random.choice(['Ë°®', 'Ë£è']))
            coin = random.choice(['Ë°®', 'Ë£è'])
            is_win = (choice == coin)
            if is_win:
                win_count[uid] += 1
            else:
                lose_count[uid] += 1
            result = f"{uname}„Åï„Çì„ÅÆÈÅ∏Êäû: **{choice}**\n„Ç≥„Ç§„É≥„Éà„ÇπÁµêÊûú: **{coin}**\n"
            if is_win:
                result += "üü¢ Âãù„Å°ÔºÅ +10„Ç≥„Ç§„É≥"
            else:
                result += "üî¥ Ë≤†„Åë +5„Ç≥„Ç§„É≥"
            round_results.append(result)
        # „É©„Ç¶„É≥„Éâ„Åî„Å®„Å´„Åæ„Å®„ÇÅ„Å¶edit
        round_embed = discord.Embed(title=f"ü™ô „Ç≥„Ç§„É≥„Éà„Çπ Round {round_num} ÁµêÊûú", description='\n\n'.join(round_results), color=0x43b581)
        if msg is not None:
            await msg.edit(embed=round_embed, view=None)
        await asyncio.sleep(2)
    # „Ç≥„Ç§„É≥‰ªò‰∏é
    for uid in win_count:
        if win_count[uid] > 0:
            game_manager.add_currency(str(uid), 10 * win_count[uid])
    for uid in lose_count:
        if lose_count[uid] > 0:
            game_manager.remove_currency(str(uid), 5 * lose_count[uid])
    # ÊúÄÁµÇ„É™„Ç∂„É´„Éà
    summary = []
    for uid, uname in players:
        total = win_count[uid]*10 - lose_count[uid]*5
        summary.append(f"{uname}: {win_count[uid]}Âãù {lose_count[uid]}Êïó  (ÂêàË®à: {total}„Ç≥„Ç§„É≥)" )
    result_embed = discord.Embed(title="ü™ô „Ç≥„Ç§„É≥„Éà„ÇπÊúÄÁµÇÁµêÊûú", description='\n'.join(summary), color=0x43b581)
    await ctx.send(embed=result_embed)





class CoinTossButton(discord.ui.Button):
    def __init__(self, label, view):
        super().__init__(label=label, style=discord.ButtonStyle.primary)
        self.label_val = label
        self.view_ref = view
    async def callback(self, interaction: discord.Interaction):
        user_id = str(interaction.user.id)
        # Ëá™ÂàÜ„ÅÆÁï™‰ª•Â§ñ„ÅØÊäº„Åõ„Å™„ÅÑ
        allowed_ids = [str(u[0]) for u in self.view_ref.players]
        if user_id not in allowed_ids:
            await interaction.response.send_message("„ÅÇ„Å™„Åü„ÅÆÁï™„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ", ephemeral=True)
            return
        if user_id in self.view_ref.choices:
            await interaction.response.send_message("„Åô„Åß„Å´ÈÅ∏ÊäûÊ∏à„Åø„Åß„Åô„ÄÇ", ephemeral=True)
            return
        self.view_ref.choices[user_id] = self.label_val
        await interaction.response.send_message(f"{self.label_val} „ÇíÈÅ∏Êäû„Åó„Åæ„Åó„ÅüÔºÅ", ephemeral=True)
        if len(self.view_ref.choices) >= self.view_ref.n:
            self.view_ref.done.set()


class CoinTossView(discord.ui.View):
    def __init__(self, players, timeout=30):
        super().__init__(timeout=timeout)
        self.players = players
        self.n = len(players)
        self.choices = {}
        self.done = asyncio.Event()
        self.add_item(CoinTossButton('Ë°®', self))
        self.add_item(CoinTossButton('Ë£è', self))
    async def on_timeout(self):
        self.auto_select()
        self.done.set()
    def auto_select(self):
        for uid, uname in [(str(u[0]), u[1]) for u in self.players]:
            if uid not in self.choices:
                self.choices[uid] = random.choice(['Ë°®', 'Ë£è'])


